// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlaceMyBet.Models;

namespace PlaceMyBet.Migrations
{
    [DbContext(typeof(PlaceMyBetContext))]
    partial class PlaceMyBetContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("PlaceMyBet.Models.Apuesta", b =>
                {
                    b.Property<int>("ApuestaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Cuota")
                        .HasColumnType("double");

                    b.Property<double>("DineroApostado")
                        .HasColumnType("double");

                    b.Property<string>("Fecha")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("MercadoID")
                        .HasColumnType("int");

                    b.Property<string>("TipoApuesta")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UsuarioEmail")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("ApuestaID");

                    b.HasIndex("MercadoID");

                    b.HasIndex("UsuarioEmail");

                    b.ToTable("Apuestas");

                    b.HasData(
                        new
                        {
                            ApuestaID = 1,
                            Cuota = 1.8999999999999999,
                            DineroApostado = 10.0,
                            Fecha = "2020-11-04 11:37:06",
                            MercadoID = 1,
                            TipoApuesta = "Over",
                            UsuarioEmail = "yomismomismo@yomismo.cat"
                        },
                        new
                        {
                            ApuestaID = 5,
                            Cuota = 1.78,
                            DineroApostado = 10.0,
                            Fecha = "2020-11-04 11:38:12",
                            MercadoID = 1,
                            TipoApuesta = "Over",
                            UsuarioEmail = "tumismo@yomismo.cat"
                        },
                        new
                        {
                            ApuestaID = 6,
                            Cuota = 1.8999999999999999,
                            DineroApostado = 10.0,
                            Fecha = "2020-11-04 12:10:35",
                            MercadoID = 2,
                            TipoApuesta = "Over",
                            UsuarioEmail = "tumismo@yomismo.cat"
                        });
                });

            modelBuilder.Entity("PlaceMyBet.Models.Cuenta", b =>
                {
                    b.Property<int>("CuentaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre_Banco")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Saldo_Actual")
                        .HasColumnType("int");

                    b.Property<int>("Tarjeta_Credito")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("CuentaID");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("Cuentas");

                    b.HasData(
                        new
                        {
                            CuentaID = 4,
                            Nombre_Banco = "Bankmismo",
                            Saldo_Actual = 200,
                            Tarjeta_Credito = 452147943,
                            UsuarioId = "yomismomismo@yomismo.cat"
                        });
                });

            modelBuilder.Entity("PlaceMyBet.Models.Evento", b =>
                {
                    b.Property<int>("EventoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Equipo_Local")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Equipo_Visitante")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Fecha")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Goles")
                        .HasColumnType("int");

                    b.HasKey("EventoID");

                    b.ToTable("Eventos");

                    b.HasData(
                        new
                        {
                            EventoID = 1,
                            Equipo_Local = "Valencia",
                            Equipo_Visitante = "Espanyol",
                            Fecha = "2020-09-16",
                            Goles = 0
                        });
                });

            modelBuilder.Entity("PlaceMyBet.Models.Mercado", b =>
                {
                    b.Property<int>("MercadoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("CuotaOver")
                        .HasColumnType("double");

                    b.Property<double>("CuotaUnder")
                        .HasColumnType("double");

                    b.Property<double>("DineroOver")
                        .HasColumnType("double");

                    b.Property<double>("DineroUnder")
                        .HasColumnType("double");

                    b.Property<int>("EventoID")
                        .HasColumnType("int");

                    b.Property<double>("OverUnder")
                        .HasColumnType("double");

                    b.HasKey("MercadoID");

                    b.HasIndex("EventoID");

                    b.ToTable("Mercados");

                    b.HasData(
                        new
                        {
                            MercadoID = 1,
                            CuotaOver = 1.74,
                            CuotaUnder = 2.0899999999999999,
                            DineroOver = 240.0,
                            DineroUnder = 200.0,
                            EventoID = 1,
                            OverUnder = 1.5
                        },
                        new
                        {
                            MercadoID = 2,
                            CuotaOver = 1.8999999999999999,
                            CuotaUnder = 1.8999999999999999,
                            DineroOver = 210.0,
                            DineroUnder = 100.0,
                            EventoID = 1,
                            OverUnder = 2.5
                        },
                        new
                        {
                            MercadoID = 3,
                            CuotaOver = 2.8500000000000001,
                            CuotaUnder = 1.4299999999999999,
                            DineroOver = 50.0,
                            DineroUnder = 100.0,
                            EventoID = 1,
                            OverUnder = 3.5
                        });
                });

            modelBuilder.Entity("PlaceMyBet.Models.Usuario", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Apellido")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Edad")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Email");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Email = "tumismo@yomismo.cat",
                            Apellido = "mismo",
                            Edad = 19,
                            Nombre = "Tumismo'"
                        },
                        new
                        {
                            Email = "yomismomismo@yomismo.cat",
                            Apellido = "Mismo",
                            Edad = 21,
                            Nombre = "Yomismo"
                        });
                });

            modelBuilder.Entity("PlaceMyBet.Models.Apuesta", b =>
                {
                    b.HasOne("PlaceMyBet.Models.Mercado", "Mercado")
                        .WithMany("Apuestas")
                        .HasForeignKey("MercadoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlaceMyBet.Models.Usuario", "Usuario")
                        .WithMany("Apuestas")
                        .HasForeignKey("UsuarioEmail");
                });

            modelBuilder.Entity("PlaceMyBet.Models.Cuenta", b =>
                {
                    b.HasOne("PlaceMyBet.Models.Usuario", "Usuario")
                        .WithOne("Cuenta")
                        .HasForeignKey("PlaceMyBet.Models.Cuenta", "UsuarioId");
                });

            modelBuilder.Entity("PlaceMyBet.Models.Mercado", b =>
                {
                    b.HasOne("PlaceMyBet.Models.Evento", "Evento")
                        .WithMany("Mercados")
                        .HasForeignKey("EventoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
